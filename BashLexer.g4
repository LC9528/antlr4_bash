lexer grammar BashLexer;

BLANK : [ \t]+ -> skip;
NAME : [-a-zA-Z0-9_./]+ -> mode(NECK);
HEAD_EQ : '=' -> type(NAME), mode(NO_ASSIGN);
VAR : '$' ( [$!@] | [a-zA-Z0-9_]+)? -> mode(NO_ASSIGN);
SQUOTE_STR : '\'' (~['\\] | '\\' [\\'])* '\'' -> mode(NO_ASSIGN) ;
DQUOTE : '"' -> mode(NO_ASSIGN), pushMode(INSIDE_DQUOTE) ;
DOLLAR_LPAREN : '$(' -> mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
LT_LPAREN : '<(' -> mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
GT_LPAREN : '>(' -> mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
BACKTICK : '`' -> mode(NO_ASSIGN), pushMode(BT);
PIPE: '|';
RPAREN : ')' -> popMode;

mode NECK;
NECK_NAME : NAME -> type(NAME);
NECK_BLANK : BLANK -> skip, mode(ARGS);
EQ : HEAD_EQ -> mode(ASSIGN_RLS);
NECK_VAR : VAR -> type(VAR), mode(NO_ASSIGN);
NECK_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR), mode(NO_ASSIGN) ;
NECK_DQUOTE : DQUOTE -> type(DQUOTE), mode(NO_ASSIGN), pushMode(INSIDE_DQUOTE) ;
NECK_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
NECK_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
NECK_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), mode(NO_ASSIGN), pushMode(DEFAULT_MODE);
NECK_BACKTICK : BACKTICK -> type(BACKTICK), mode(NO_ASSIGN), pushMode(BT);
NECK_RPAREN : RPAREN -> type(RPAREN), popMode;

mode NO_ASSIGN;
NO_ASSIGN_NAME : [-a-zA-Z0-9_./=]+ -> type(NAME);
NO_ASSIGN_BLANK : BLANK -> skip, mode(ARGS);
NO_ASSIGN_VAR : VAR -> type(VAR);
NO_ASSIGN_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR) ;
NO_ASSIGN_DQUOTE : DQUOTE -> type(DQUOTE), pushMode(INSIDE_DQUOTE) ;
NO_ASSIGN_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(DEFAULT_MODE);
NO_ASSIGN_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(DEFAULT_MODE);
NO_ASSIGN_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN),  pushMode(DEFAULT_MODE);
NO_ASSIGN_BACKTICK : BACKTICK -> type(BACKTICK),pushMode(BT);
NO_ASSIGN_RPAREN : RPAREN -> type(RPAREN), popMode;

mode ARGS;
ARG: (~[$<>`()|'" \t])+ -> type(NAME);
ARGS_SQUOTE_STR : SQUOTE_STR  -> type(SQUOTE_STR);
ARGS_VAR : VAR -> type(VAR);
ARGS_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(DEFAULT_MODE);
ARGS_LT_LPAREN : LT_LPAREN ->type(LT_LPAREN), pushMode(DEFAULT_MODE);
ARGS_GT_LPAREN : GT_LPAREN ->type(GT_LPAREN), pushMode(DEFAULT_MODE);
ARGS_DQUOTE : DQUOTE ->type(DQUOTE), pushMode(INSIDE_DQUOTE);
ARGS_BLANK : BLANK;
ARGS_PIPE : PIPE -> type(PIPE), mode(DEFAULT_MODE);
ARGS_BACKTICK : BACKTICK ->type(BACKTICK), pushMode(BT);
ARGS_RPAREN: RPAREN -> type(RPAREN), popMode;

mode ASSIGN_RLS;
LITERAL: (~[$<>`()|'" \t])+;
RLS_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR) ;
RLS_VAR : VAR -> type(VAR);
RLS_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(DEFAULT_MODE);
RLS_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(DEFAULT_MODE);
RLS_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), pushMode(DEFAULT_MODE);
RLS_DQUOTE : DQUOTE -> type(DQUOTE), pushMode(INSIDE_DQUOTE);
RLS_BLANK: BLANK -> mode(DEFAULT_MODE);
RLS_PIPE : PIPE -> type(PIPE), mode(DEFAULT_MODE);
RLS_BACKTICK : BACKTICK -> type(BACKTICK), pushMode(BT);
RLS_RPAREN: RPAREN -> type(RPAREN), popMode;

mode INSIDE_DQUOTE;
DQUOTE_CONTENT : (~["\\$<>`] | '\\' [\\"])+;
DQUOTE_VAR : VAR -> type(VAR);
DQUOTE_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_BACKTICK : BACKTICK -> type(BACKTICK), pushMode(BT);
TAIL_DQUOTE : DQUOTE -> type(DQUOTE), popMode;

// almost a full copy, just for backtick
mode BT;
BT_BLANK : BLANK -> skip;
BT_NAME : NAME -> type(NAME), mode(BT_NECK);
BT_HEAD_EQ : EQ -> type(NAME), mode(BT_NO_ASSIGN);
BT_VAR : VAR -> type(VAR), mode(BT_NO_ASSIGN);
BT_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR), mode(BT_NO_ASSIGN) ;
BT_DQUOTE : DQUOTE -> type(DQUOTE), mode(BT_NO_ASSIGN), pushMode(INSIDE_DQUOTE) ;
BT_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_PIPE: PIPE -> type(PIPE);
BT_BACKTICK : BACKTICK -> type(BACKTICK), popMode;
BT_RPAREN : RPAREN -> type(RPAREN), popMode;

mode BT_NECK;
BT_NECK_NAME : NAME -> type(NAME);
BT_NECK_BLANK : BLANK -> skip, mode(BT_ARGS);
BT_EQ : HEAD_EQ -> type(EQ), mode(BT_ASSIGN_RLS);
BT_NECK_VAR : VAR -> type(VAR), mode(BT_NO_ASSIGN);
BT_NECK_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR), mode(BT_NO_ASSIGN) ;
BT_NECK_DQUOTE : DQUOTE -> type(DQUOTE), mode(BT_NO_ASSIGN), pushMode(INSIDE_DQUOTE) ;
BT_NECK_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_NECK_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_NECK_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), mode(BT_NO_ASSIGN), pushMode(BT);
BT_NECK_BACKTICK : BACKTICK -> type(BACKTICK), popMode;
BT_NECK_RPAREN : RPAREN -> type(RPAREN), popMode;

mode BT_NO_ASSIGN;
BT_NO_ASSIGN_NAME : NAME -> type(NAME);
BT_NO_ASSIGN_BLANK : BLANK -> skip, mode(BT_ARGS);
BT_NO_ASSIGN_VAR : VAR -> type(VAR);
BT_NO_ASSIGN_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR) ;
BT_NO_ASSIGN_DQUOTE : DQUOTE -> type(DQUOTE), pushMode(INSIDE_DQUOTE) ;
BT_NO_ASSIGN_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(BT);
BT_NO_ASSIGN_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(BT);
BT_NO_ASSIGN_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN),  pushMode(BT);
BT_NO_ASSIGN_BACKTICK : BACKTICK -> type(BACKTICK), popMode;
BT_NO_ASSIGN_RPAREN : RPAREN -> type(RPAREN), popMode;

mode BT_ARGS;
BT_ARG: ARG -> type(NAME);
BT_ARGS_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR) ;
BT_ARGS_VAR : VAR -> type(VAR);
BT_ARGS_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(BT);
BT_ARGS_LT_LPAREN : LT_LPAREN ->type(LT_LPAREN), pushMode(BT);
BT_ARGS_GT_LPAREN : GT_LPAREN ->type(GT_LPAREN), pushMode(BT);
BT_ARGS_DQUOTE : DQUOTE ->type(DQUOTE), pushMode(INSIDE_DQUOTE);
BT_ARGS_BLANK : BLANK -> type(ARGS_BLANK);
BT_ARGS_PIPE : PIPE -> mode(BT);
BT_ARGS_BACKTICK : BACKTICK ->type(BACKTICK), popMode;
BT_ARGS_RPAREN: RPAREN -> type(RPAREN), popMode;

mode BT_ASSIGN_RLS;
BT_LITERAL: LITERAL -> type(LITERAL);
BT_RLS_SQUOTE_STR : SQUOTE_STR -> type(SQUOTE_STR);
BT_RLS_VAR : VAR -> type(VAR);
BT_RLS_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(BT);
BT_RLS_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(BT);
BT_RLS_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), pushMode(BT);
BT_RLS_DQUOTE : DQUOTE -> type(DQUOTE), pushMode(INSIDE_DQUOTE);
BT_RLS_BLANK: BLANK -> type(RLS_BLANK), mode(BT);
BT_RLS_BACKTICK : BACKTICK -> type(BACKTICK), popMode;
BT_RLS_RPAREN: RPAREN -> type(RPAREN), popMode;

