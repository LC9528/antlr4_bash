lexer grammar BashLexer;

VARNAME : [a-zA-Z_][a-zA-Z0-9_]*;
NAME : (~[a-zA-Z0-9= \t\n<>(){}'"|$&`;])+;
NUM : [0-9]+;
BLANK : [ \t]+;
EQ : '=';
VAR : '$' ( [$!@] | [a-zA-Z0-9_]+)?;
SQUOTE_STR : '\'' (~['\\] | '\\' .)* '\'';
DQUOTE : '"' -> pushMode(INSIDE_DQUOTE) ;
LPAREN : '(';
DOLLAR_LPAREN : '$(' -> pushMode(DEFAULT_MODE);
LT_LPAREN : '<(' -> pushMode(DEFAULT_MODE);
GT_LPAREN : '>(' -> pushMode(DEFAULT_MODE);
BACKTICK : '`' -> pushMode(BT);
DOLLAR_DLPAREN: '$((' -> pushMode(DEFAULT_MODE);
LCURLY: '{';
RCURLY: '}';
SEMI: ';';
PIPE: '|';
LT: '<';
GT: '>';
LT_AND: '<&';
GT_AND: '>&';
AND_GT: '&>';
AND_DGT: '&>>';
DLT: '<<';
TLT: '<<<';
DLT_DASH: '<<-';
DGT: '>>';
LTGT: '<>';
GTPIPE: '>|';
NL: '\n' -> skip;
RPAREN : ')' -> popMode;
DRPAREN : '))' -> popMode;

mode INSIDE_DQUOTE;
DQUOTE_CONTENT : (~["\\$<>`] | '\\' [\\"])+;
DQUOTE_VAR : VAR -> type(VAR);
DQUOTE_DOLLAR_LPAREN : DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_LT_LPAREN : LT_LPAREN -> type(LT_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_GT_LPAREN : GT_LPAREN -> type(GT_LPAREN), pushMode(DEFAULT_MODE);
DQUOTE_BACKTICK : BACKTICK -> type(BACKTICK), pushMode(BT);
TAIL_DQUOTE : DQUOTE -> type(DQUOTE), popMode;

// almost a full copy, just for backtick
mode BT;
BT_VARNAME: VARNAME -> type(VARNAME);
BT_NAME: NAME -> type(NAME);
BT_NUM: NUM -> type(NUM);
BT_BLANK: BLANK -> type(BLANK);
BT_EQ: EQ -> type(EQ);
BT_VAR: VAR -> type(VAR);
BT_SQUOTE_STR: SQUOTE_STR -> type(SQUOTE_STR);
BT_DQUOTE: DQUOTE -> type(DQUOTE), pushMode(INSIDE_DQUOTE);
BT_LPAREN: LPAREN -> type(LPAREN);
BT_DOLLAR_LPAREN: DOLLAR_LPAREN -> type(DOLLAR_LPAREN), pushMode(BT);
BT_LT_LPAREN: LT_LPAREN -> type(LT_LPAREN), pushMode(BT);
BT_GT_LPAREN: GT_LPAREN -> type(GT_LPAREN), pushMode(BT);
BT_BACKTICK: BACKTICK -> type(BACKTICK), popMode;
BT_DOLLAR_DLPAREN: DOLLAR_DLPAREN -> type(DOLLAR_DLPAREN), pushMode(BT);
BT_LCURLY: LCURLY -> type(LCURLY);
BT_RCURLY: RCURLY -> type(RCURLY);
BT_SEMI: SEMI -> type(SEMI);
BT_PIPE: PIPE -> type(PIPE);
BT_LT: LT -> type(LT);
BT_GT: GT -> type(GT);
BT_LT_AND: LT_AND -> type(LT_AND);
BT_GT_AND: GT_AND -> type(GT_AND);
BT_AND_GT: AND_GT -> type(AND_GT);
BT_AND_DGT: AND_DGT -> type(AND_DGT);
BT_DLT: DLT -> type(DLT);
BT_TLT: TLT -> type(TLT);
BT_DLT_DASH: DLT_DASH -> type(DLT_DASH);
BT_DGT: DGT -> type(DGT);
BT_LTGT: LTGT -> type(LTGT);
BT_GTPIPE: GTPIPE -> type(GTPIPE);
BT_NL: NL -> skip;
BT_RPAREN: RPAREN -> type(RPAREN), popMode;
BT_DRPAREN : DRPAREN -> type(DRPAREN), popMode;
